package main

import (
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func schedule(what func(), interval time.Duration) chan struct{} {
	chStop := make(chan struct{})

	go func() {
		for {
			what()

			select {
			case <-time.After(interval):
				log.Println("interval finished, triggering event")

			case <-chStop:
				{
					log.Println("exiting scheduler goroutine")

					return
				}
			}
		}
	}()

	return chStop
}

func cleanup() {
	log.Println("cleanup")
	time.Sleep(2 * time.Second) // delay exiting for catching previous sends on channel and logs.
}

func main() {
	chCancel := make(chan os.Signal)
	signal.Notify(chCancel, os.Interrupt, syscall.SIGTERM)

	event := func() {
		log.Println("EVENT Triggered")
	}
	chStopScheduling := schedule(event, 3*time.Second)

	go func() {
		<-chCancel
		chStopScheduling <- struct{}{}
		close(chStopScheduling)

		cleanup()
		os.Exit(1)
	}()

	log.Println("going to sleep now...")

	for {
		time.Sleep(5 * time.Second) // or runtime.Gosched()
		log.Println("awaken... going back to sleep...")
	}
}
