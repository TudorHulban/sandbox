package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
)

type FieldConfig struct {
	Name         string `json:"name"`
	Type         int    `json:"ftype"`
	Length       int    `json:"flength"`
	PositiveOnly bool   `json:"fpositive"`
	MinValue     int    `json:"min"`
	MaxValue     int    `json:"max"`
}

type GenConfig struct {
	Configuration []FieldConfig `json:"config"`
	NoRows        int64         `json:"norows"`
}

type GenData struct {
	ColumnNames []string        `json:"columns"`
	Rows        [][]interface{} `json:"rowsdata"`
}

func main() {
	x := NewConfig(4)

	err := DoPOST("http://localhost:3002", x)
	log.Println("DoPOST: ", err)
}

func DoPOST(toURL string, cfg *GenConfig) error {
	u, _ := url.ParseRequestURI(toURL)
	apiURLFormatted := u.String()

	client := &http.Client{}

	buf := new(bytes.Buffer)
	json.NewEncoder(buf).Encode(cfg)
	req, err := http.NewRequest("POST", apiURLFormatted, buf)

	res, err := client.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	//log.Println("body:", string(body))

	var data GenData
	err = json.Unmarshal(body, &data)
	if err != nil {
		return err
	}

	log.Println(data.ColumnNames)
	log.Println(data.Rows)

	return err
}

func NewConfig(noRows int64) *GenConfig {
	instance := GenConfig{
		NoRows:        noRows,
		Configuration: make([]FieldConfig, 2),
	}

	instance.Configuration[0] = FieldConfig{
		Name:         "a",
		Type:         2,
		Length:       5,
		MinValue:     0,
		MaxValue:     100,
		PositiveOnly: true,
	}

	instance.Configuration[0] = FieldConfig{
		Name:         "b",
		Type:         2,
		Length:       5,
		MinValue:     0,
		MaxValue:     100,
		PositiveOnly: true,
	}

	return &instance
}
