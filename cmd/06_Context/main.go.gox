package main

import (
	"context"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

const (
	waitSecs = 4
	slowURL  = "https://httpstat.us/200"
	fastURL  = "https://olx.ro"
)

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), time.Duration(waitSecs)*time.Second)
	defer cancel()

	request, errReq := http.NewRequest(http.MethodGet, slowURL, nil)
	if errReq != nil {
		log.Fatal(errReq)
	}

	log.Println("performing request to", slowURL)
	response, errResp := http.DefaultClient.Do(request.WithContext(ctx))
	if errResp != nil {
		log.Fatal(errResp)
	}

	defer response.Body.Close()
	io.Copy(os.Stdout, response.Body)
}

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), time.Millisecond*500)
	defer cancel()

	myfunc(ctx, time.Millisecond*600, "John")
}

func myfunc(ctx context.Context, d time.Duration, arg string) string {
	select {
	case <-ctx.Done():
		log.Print(ctx.Err())

	case <-time.After(d):
		// time.Sleep(time.Millisecond * 1000)
		fmt.Printf("Hi %s\n", arg)
	}

	return "end"
}
