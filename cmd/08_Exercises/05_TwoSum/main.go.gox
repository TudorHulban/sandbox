package main

// Two Sum
// Given a slice of integers nums and an integer target,
// return indices of the two numbers such that they add up to target.

// You may assume that each input would have exactly one solution, and you may not use the same element twice.
// You can return the answer in any order.

// Example 1:
// Input: nums = [2,7,11,15], target = 9
// Output: [0,1]

// Example 2:
// Input: nums = [3,2,4], target = 6
// Output: [1,2]

// Example 3:
// Input: nums = [3,3], target = 6
// Output: [0,1]

// Example 4:
// Input: nums = [3,3], target = 7
// Output: []

func main() {}

func hashSlice(slice []int) map[int][]int {
	res := make(map[int][]int)

	for ix, value := range slice {
		if _, exists := res[value]; exists {
			res[value] = append(res[value], ix)
		}

		res[value] = []int{ix}
	}

	return res
}

func findValues(slice []int, sumAmount int) [2]int {
	hash := hashSlice(slice)

	for ix, value := range slice {
		difference := sumAmount - value

		if _, exists := hash[difference]; exists {
			for _, sliceIndex := range hash[difference] {
				if ix != sliceIndex {
					return [2]int{ix, sliceIndex}
				}
			}
		}
	}

	return [2]int{}
}
