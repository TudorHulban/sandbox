package main

import (
	"fmt"
)

type interval struct {
	posLeft  int
	posRight int
}

func (t interval) String() string {
	return fmt.Sprintf("interval with position Left: %d, position right: %d", t.posLeft, t.posRight)
}

func (t interval) getRange(numbers []int, description string) []int {
	if len(numbers) == 0 {
		return nil
	}

	if len(numbers) == 1 {
		return numbers
	}

	if t.posLeft > len(numbers) || t.posRight > len(numbers) {
		return nil
	}

	if t.posLeft == t.posRight {
		return []int{numbers[t.posLeft]}
	}

	return numbers[t.posLeft : t.posRight+1]
}

func (t interval) width() int {
	return t.posRight - t.posLeft
}

func (t *interval) resetAt(number int) {
	t.posRight = number
	t.posLeft = number
}

func max(a, b int) int {
	if a > b {
		return a
	}

	return b
}

func maxInterval(a, b interval) interval {
	if a.width() > b.width() {
		return a
	}

	return b
}

func getLongestRange(numbers []int) interval {
	var res interval

	if len(numbers) == 1 {
		return res
	}

	var bufInterval interval

	for i := 1; i < len(numbers); i++ {
		if numbers[i-1] > numbers[i] {
			bufInterval.posRight++

			if i == len(numbers)-1 {
				return maxInterval(bufInterval, res)
			}

			continue
		}

		res = maxInterval(bufInterval, res)

		bufInterval.resetAt(i)
	}

	return res
}

func parse(slice []int) int {
	var previousNumber int
	var previousRange int
	var counterRange int

	for ix, number := range slice {
		if ix == 0 {
			previousNumber = number
			previousRange++
			counterRange++

			continue
		}

		if previousNumber > number {
			previousNumber = number
			counterRange++

			if ix == len(slice)-1 {
				return max(counterRange, previousRange)
			}

			continue
		}

		previousRange = max(counterRange, previousRange)

		previousNumber = number

		counterRange = 1
	}

	return previousRange
}

func main() {}
