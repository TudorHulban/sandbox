package main

import (
	"sort"
)

// Given two sorted []int, merge them into a single sorted slice.
// The lists might have different length.

// Resources: https://adaickalavan.github.io/portfolio/coding-questions-in-golang/#findPair&gsc.tab=0
// item 4.

// What about median calculation for result?

var a1 = []int{1, 3, 5, 7}
var a2 = []int{2, 4, 6, 8, 9}

func main() {}

func orderWStandardLibSort(a1, a2 []int) []int {
	result := append(a1, a2...)
	sort.Ints(result)

	return result
}

func orderWComparison(a1, a2 []int) []int {
	var result []int
	var indexA2 int

	for _, valueA1 := range a1 {
		for indexA2 <= len(a2)-1 {
			if valueA1 < a2[indexA2] {
				break
			}

			result = append(result, a2[indexA2])
			indexA2++
		}

		result = append(result, valueA1)
	}

	return append(result, a2[indexA2:]...)
}

func median(a []int) float64 {
	if len(a)%2 == 0 {
		middle := len(a)/2 - 1
		return float64((a[middle] + a[middle+1])) / 2
	}

	return float64(a[len(a)/2])
}
