package main

import (
	"bytes"
	"embed"
	"fmt"
	"html/template"
	"log"
	"os"

	"github.com/gofiber/fiber/v2"
)

type server struct {
	app  *fiber.App
	port string
}

type Session struct {
	Username        string
	IsAuthenticated bool
}

type State struct {
	Session

	Data []string
}

const _chosenFruit = "Banana"

//go:embed templates/*.gohtml
var f embed.FS

func main() {
	s := server{
		app:  fiber.New(),
		port: ":3000",
	}

	state := State{
		Session: Session{
			IsAuthenticated: true,
			Username:        "john",
		},
		Data: []string{"Orange", "Apple", "Banana"},
	}

	s.app.Get("/", func(c *fiber.Ctx) error {
		buf := s.renderState(&state)

		return c.Type("html").Send(buf.Bytes())
	})

	log.Fatal(s.app.Listen(s.port))
}

func (s *server) renderState(state *State) bytes.Buffer {
	funcMap := template.FuncMap{
		"isChosen": func(fruit string) bool {
			return fruit == _chosenFruit
		},
	}

	tmpl := template.New("")
	tmpl.Funcs(funcMap)

	tmpl, err := tmpl.ParseFS(f, "templates/index.gohtml")
	if err != nil {
		fmt.Println(err)

		os.Exit(1)
	}

	var buf bytes.Buffer

	tmpl.ExecuteTemplate(&buf, "index.gohtml", state)

	return buf
}
